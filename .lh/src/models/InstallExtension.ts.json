{
    "sourceFile": "src/models/InstallExtension.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1681973632404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1681973632404,
            "name": "Commit-0",
            "content": "/*\n * @Author: Allen OYang\n * @Email:  allenwill211@gmail.com\n * @Date: 2023-04-17 14:25:03\n * @LastEditTime: 2023-04-20 14:53:51\n * @LastEditors: Allen OYang allenwill211@gmail.com\n * @FilePath: /speak-gpt/src/models/InstallExtension.ts\n */\nimport Eventemitter from 'eventemitter3'\ntype Objects = {\n  startRecord: () => void\n  stopRecord: () => void\n}\n\nexport class InstallExtension {\n  static extension: { [key: string]: new (...args: any[]) => object } = {}\n  public transformExtensions: { [key: string]: object } = {}\n  public extensions: { value: string; label: string }[] = []\n  public currUseExtension: string = ''\n  static emitter: Eventemitter = new Eventemitter()\n\n  constructor() {\n    this.install()\n  }\n\n  private getCurrExtension(): Objects {\n    return this.transformExtensions[this.currUseExtension] as Objects\n  }\n\n  public startRecord() {\n    this.getCurrExtension().startRecord()\n  }\n\n  public stopRecord() {\n    this.getCurrExtension().stopRecord()\n  }\n\n  private install() {\n    const extensionsName = Object.keys(InstallExtension.extension)\n    this.currUseExtension = extensionsName[0]\n    extensionsName.forEach((item: string) => {\n      const fun = new InstallExtension.extension[item](InstallExtension)\n      this.transformExtensions[item] = fun\n      this.extensions.push({ value: item, label: item })\n    })\n  }\n\n  static use(key: string, fun: new (...args: any[]) => object) {\n    if (isClass(fun)) {\n      InstallExtension.extension[key] = fun\n      return\n    }\n    console.warn(`Extensions: extension ${key}, Not an Extensions class`)\n  }\n}\n\nfunction isClass(param: any): param is new (...args: any[]) => object {\n  return (\n    typeof param === 'function' &&\n    /^\\s*class\\s+/.test(param.toString()) &&\n    param.prototype.hasOwnProperty('constructor')\n  )\n}\n"
        }
    ]
}