{
    "sourceFile": "src/core/InstallExtension.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1681714780321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681716225777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,28 @@\n-class InstallExtension {\n+export class InstallExtension {\n   static extension: { [key: string]: new (...args: any[]) => object } = {}\n-  private transformExtension: { [key: string]: object } = {}\n+  public transformExtensions: { [key: string]: object } = {}\n   public currUseExtension: string = ''\n \n \n   constructor () {\n-\n+    this.install()\n   }\n \n-  getCurrExtension() {\n-    return this.transformExtension[this.currUseExtension]\n+  getCurrExtension<T>(): T {\n+    return this.transformExtensions[this.currUseExtension] as T\n   }\n \n-  protected startRecord() {\n-    this.getCurrExtension().startRecord()\n+  protected startRecord(){\n+    this.getCurrExtension()\n   }\n \n   private install() {\n     const extensionsName = Object.keys(InstallExtension.extension)\n     this.currUseExtension = extensionsName[0]\n     extensionsName.forEach((item: string) => {\n       const fun = new InstallExtension.extension[item]()\n-      this.transformExtension[item] = fun\n+      this.transformExtensions[item] = fun\n     })\n   }\n \n   static use(key: string, fun: new (...args: any[]) => object) {\n"
                },
                {
                    "date": 1681716948358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,9 @@\n+type Objects = {\n+  startRecord: () => void\n+  stopRecord: () => void\n+}\n+\n export class InstallExtension {\n   static extension: { [key: string]: new (...args: any[]) => object } = {}\n   public transformExtensions: { [key: string]: object } = {}\n   public currUseExtension: string = ''\n@@ -7,16 +12,20 @@\n   constructor () {\n     this.install()\n   }\n \n-  getCurrExtension<T>(): T {\n-    return this.transformExtensions[this.currUseExtension] as T\n+  private getCurrExtension(): Objects {\n+    return this.transformExtensions[this.currUseExtension] as Objects\n   }\n \n-  protected startRecord(){\n-    this.getCurrExtension()\n+  public startRecord(){\n+    this.getCurrExtension().startRecord()\n   }\n \n+  public stopRecord(){\n+    this.getCurrExtension().stopRecord()\n+  }\n+\n   private install() {\n     const extensionsName = Object.keys(InstallExtension.extension)\n     this.currUseExtension = extensionsName[0]\n     extensionsName.forEach((item: string) => {\n"
                },
                {
                    "date": 1681717658699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,18 @@\n+import Eventemitter from 'eventemitter3'\n type Objects = {\n   startRecord: () => void\n   stopRecord: () => void\n }\n \n-export class InstallExtension {\n+export class InstallExtension extends Eventemitter {\n   static extension: { [key: string]: new (...args: any[]) => object } = {}\n   public transformExtensions: { [key: string]: object } = {}\n   public currUseExtension: string = ''\n \n \n   constructor () {\n+    super()\n     this.install()\n   }\n \n   private getCurrExtension(): Objects {\n"
                },
                {
                    "date": 1681717910524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n   private install() {\n     const extensionsName = Object.keys(InstallExtension.extension)\n     this.currUseExtension = extensionsName[0]\n     extensionsName.forEach((item: string) => {\n-      const fun = new InstallExtension.extension[item]()\n+      const fun = new InstallExtension.extension[item](InstallExtension)\n       this.transformExtensions[item] = fun\n     })\n   }\n \n"
                },
                {
                    "date": 1681718132540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,26 @@\n+/*\n+ * @Author: Allen OYang\n+ * @Email:  allenwill211@gmail.com\n+ * @Date: 2023-04-17 14:25:03\n+ * @LastEditTime: 2023-04-17 15:51:51\n+ * @LastEditors: Allen OYang allenwill211@gmail.com\n+ * @FilePath: /speak-gpt/src/core/InstallExtension.ts\n+ */\n import Eventemitter from 'eventemitter3'\n type Objects = {\n   startRecord: () => void\n   stopRecord: () => void\n }\n \n-export class InstallExtension extends Eventemitter {\n+export class InstallExtension {\n   static extension: { [key: string]: new (...args: any[]) => object } = {}\n   public transformExtensions: { [key: string]: object } = {}\n   public currUseExtension: string = ''\n+  static emitter: Eventemitter = new Eventemitter()\n \n-\n   constructor () {\n-    super()\n+    // super()\n     this.install()\n   }\n \n   private getCurrExtension(): Objects {\n"
                },
                {
                    "date": 1681719002076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n /*\n  * @Author: Allen OYang\n  * @Email:  allenwill211@gmail.com\n  * @Date: 2023-04-17 14:25:03\n- * @LastEditTime: 2023-04-17 15:51:51\n+ * @LastEditTime: 2023-04-17 16:10:02\n  * @LastEditors: Allen OYang allenwill211@gmail.com\n  * @FilePath: /speak-gpt/src/core/InstallExtension.ts\n  */\n import Eventemitter from 'eventemitter3'\n@@ -18,9 +18,8 @@\n   public currUseExtension: string = ''\n   static emitter: Eventemitter = new Eventemitter()\n \n   constructor () {\n-    // super()\n     this.install()\n   }\n \n   private getCurrExtension(): Objects {\n"
                },
                {
                    "date": 1681719726568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n \n export class InstallExtension {\n   static extension: { [key: string]: new (...args: any[]) => object } = {}\n   public transformExtensions: { [key: string]: object } = {}\n+  public extensions: { [key: string]: string }[] = []\n   public currUseExtension: string = ''\n   static emitter: Eventemitter = new Eventemitter()\n \n   constructor () {\n@@ -25,13 +26,13 @@\n   private getCurrExtension(): Objects {\n     return this.transformExtensions[this.currUseExtension] as Objects\n   }\n \n-  public startRecord(){\n+  public startRecord() {\n     this.getCurrExtension().startRecord()\n   }\n \n-  public stopRecord(){\n+  public stopRecord() {\n     this.getCurrExtension().stopRecord()\n   }\n \n   private install() {\n@@ -39,9 +40,12 @@\n     this.currUseExtension = extensionsName[0]\n     extensionsName.forEach((item: string) => {\n       const fun = new InstallExtension.extension[item](InstallExtension)\n       this.transformExtensions[item] = fun\n+      this.extensions.push({ value: item, label: item })\n     })\n+\n+    InstallExtension.emitter.emit('changeExtension', this.extensions)\n   }\n \n   static use(key: string, fun: new (...args: any[]) => object) {\n     if (isClass(fun)) {\n"
                },
                {
                    "date": 1681719782864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n       const fun = new InstallExtension.extension[item](InstallExtension)\n       this.transformExtensions[item] = fun\n       this.extensions.push({ value: item, label: item })\n     })\n-\n+    console.log('this.extensions', this.extensions)\n     InstallExtension.emitter.emit('changeExtension', this.extensions)\n   }\n \n   static use(key: string, fun: new (...args: any[]) => object) {\n"
                },
                {
                    "date": 1681720100614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n /*\n  * @Author: Allen OYang\n  * @Email:  allenwill211@gmail.com\n  * @Date: 2023-04-17 14:25:03\n- * @LastEditTime: 2023-04-17 16:10:02\n+ * @LastEditTime: 2023-04-17 16:28:19\n  * @LastEditors: Allen OYang allenwill211@gmail.com\n  * @FilePath: /speak-gpt/src/core/InstallExtension.ts\n  */\n import Eventemitter from 'eventemitter3'\n@@ -20,8 +20,9 @@\n   static emitter: Eventemitter = new Eventemitter()\n \n   constructor () {\n     this.install()\n+    InstallExtension.emitter.emit('changeExtension', this.extensions)\n   }\n \n   private getCurrExtension(): Objects {\n     return this.transformExtensions[this.currUseExtension] as Objects\n@@ -42,10 +43,9 @@\n       const fun = new InstallExtension.extension[item](InstallExtension)\n       this.transformExtensions[item] = fun\n       this.extensions.push({ value: item, label: item })\n     })\n-    console.log('this.extensions', this.extensions)\n-    InstallExtension.emitter.emit('changeExtension', this.extensions)\n+   \n   }\n \n   static use(key: string, fun: new (...args: any[]) => object) {\n     if (isClass(fun)) {\n"
                },
                {
                    "date": 1681720199255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,15 +14,14 @@\n \n export class InstallExtension {\n   static extension: { [key: string]: new (...args: any[]) => object } = {}\n   public transformExtensions: { [key: string]: object } = {}\n-  public extensions: { [key: string]: string }[] = []\n+  public extensions:  {value: string, label: string}[] = []\n   public currUseExtension: string = ''\n   static emitter: Eventemitter = new Eventemitter()\n \n   constructor () {\n     this.install()\n-    InstallExtension.emitter.emit('changeExtension', this.extensions)\n   }\n \n   private getCurrExtension(): Objects {\n     return this.transformExtensions[this.currUseExtension] as Objects\n"
                }
            ],
            "date": 1681714780321,
            "name": "Commit-0",
            "content": "class InstallExtension {\n  static extension: { [key: string]: new (...args: any[]) => object } = {}\n  private transformExtension: { [key: string]: object } = {}\n  public currUseExtension: string = ''\n\n\n  constructor () {\n\n  }\n\n  getCurrExtension() {\n    return this.transformExtension[this.currUseExtension]\n  }\n\n  protected startRecord() {\n    this.getCurrExtension().startRecord()\n  }\n\n  private install() {\n    const extensionsName = Object.keys(InstallExtension.extension)\n    this.currUseExtension = extensionsName[0]\n    extensionsName.forEach((item: string) => {\n      const fun = new InstallExtension.extension[item]()\n      this.transformExtension[item] = fun\n    })\n  }\n\n  static use(key: string, fun: new (...args: any[]) => object) {\n    if (isClass(fun)) {\n      InstallExtension.extension[key] = fun\n      return\n    }\n    console.warn(`Extensions: extension ${key}, Not an Extensions class`)\n  }\n}\n\nfunction isClass(param: any): param is new (...args: any[]) => object {\n  return (\n    typeof param === 'function' &&\n    /^\\s*class\\s+/.test(param.toString()) &&\n    param.prototype.hasOwnProperty('constructor')\n  );\n}\n\n"
        }
    ]
}