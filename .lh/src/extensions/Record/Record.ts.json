{
    "sourceFile": "src/extensions/Record/Record.ts",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1681712555076,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1681712555076,
            "name": "Commit-0",
            "content": "import Recorder from '@/extensions/Record/index';\nimport { Player } from '@/utils/MicrophoneRecord';\nimport { AliyunTransformAudio } from '@/Transform/AliyunTransform'\nimport { v4 as uuidv4 } from 'uuid';\n\nconst token = `7bce9de7bf1242de9e060caa6bdcd72c`\n\nconst config = {\n  sampleBits: 16,\n  sampleRate: 16000,\n  numChannels: 1,\n  compiling: true,       // 是否开启边录音边转化（后期改用web worker）\n}\n\n\nexport class Record {\n  private recorder: Recorder | null = null;\n  private playTimer: NodeJS.Timeout | null = null;\n  private aliyun: AliyunTransformAudio | null = null;\n\n  constructor () {\n    this.init()\n  }\n\n  init() {\n    console.log('init>>>')\n    this.recorder = new Recorder(config);\n\n    this.recorder.onprocess = function (duration) {\n      // this.setState({\n      //     duration: duration.toFixed(5),\n      // });\n      // 推荐使用 onprogress\n    }\n\n    // this.recorder.onprogress = (params) => {\n    //   // 此处控制数据的收集频率\n    //   if (config.compiling) {\n    //     console.log('音频总数据：', params.data);\n    //   }\n    // }\n\n    this.recorder.onplay = () => {\n      console.log('%c回调监听，开始播放音频', 'color: #2196f3')\n    }\n    this.recorder.onpauseplay = () => {\n      console.log('%c回调监听，暂停播放音频', 'color: #2196f3')\n    }\n    this.recorder.onresumeplay = () => {\n      console.log('%c回调监听，恢复播放音频', 'color: #2196f3')\n    }\n    this.recorder.onstopplay = () => {\n      console.log('%c回调监听，停止播放音频', 'color: #2196f3')\n    }\n    this.recorder.onplayend = () => {\n      console.log('%c回调监听，音频已经完成播放', 'color: #2196f3')\n      // 播放结束后，停止绘制canavs\n      // this.stopDrawPlay();\n    }\n\n    if (config.compiling) {\n      this.compiling();\n    }\n  }\n\n  /**\n   * 实时转播信息\n   */\n  handleMessage() {\n    if (this.aliyun) return;\n    this.aliyun = new AliyunTransformAudio();\n    this.aliyun.event!.on('message', (event) => {\n      console.log('message', event)\n    })\n  }\n\n  /**\n   * 实时录播\n   */\n  compiling() {\n    this.playTimer = setInterval(() => {\n      if (!this.recorder) {\n        return;\n      }\n\n      let newData = this.recorder.getNextData();\n      if (!newData.length) {\n        return;\n      }\n\n\n      let byteLength = newData[0].byteLength\n      let buffer = new ArrayBuffer(newData.length * byteLength)\n\n      let dataView = new DataView(buffer)\n     \n\n      // // 数据合并\n      for (let i = 0, iLen = newData.length; i < iLen; ++i) {\n        for (let j = 0, jLen = newData[i].byteLength; j < jLen; ++j) {\n          dataView.setInt8(i * byteLength + j, newData[i].getInt8(j))\n        }\n      }\n\n      console.log('dataView', dataView)\n      this.aliyun?.sendBlob(new Blob([dataView]))\n\n      // // 将录音数据转成WAV格式，并播放\n      // let audioDB = encodeWAV(dataView, config.sampleRate, config.sampleRate, config.numChannels, config.sampleBits, false)\n      // this.aliyun?.sendBlob(new Blob([audioDB.buffer], { type: 'audio/wav' }))\n    }, 500)\n  }\n\n  startRecord() {\n    try {\n      this.recorder!.start().then(() => {\n        this.handleMessage()\n        return Promise.resolve()\n      })\n    } catch (error: any) {\n      return Promise.reject(`异常了,${error.name}:${error.message}`)\n    }\n  }\n\n  stopRecord() {\n    this.aliyun?.send({\n      headers: {\n        message_id: uuidv4().replace(/-/g, ''),\n        name: 'StopTranscription',\n      },\n    })\n    this.playTimer && clearInterval(this.playTimer);\n    this.recorder!.stop();\n  }\n\n  playRecord() {\n    \n    this.recorder?.play();\n  }\n\n}\n\n"
        }
    ]
}