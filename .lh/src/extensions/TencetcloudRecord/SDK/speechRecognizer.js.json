{
    "sourceFile": "src/extensions/TencetcloudRecord/SDK/speechRecognizer.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1681723416492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681727216344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,21 +110,21 @@\n   OnSentenceBegin(res) {\n \n   }\n   // 识别结果发生变化的时候\n-  OnRecognitionResultChange() {\n+  OnRecognitionResultChange(res) {\n \n   }\n   // 一句话结束的时候\n-  OnSentenceEnd() {\n+  OnSentenceEnd(res) {\n \n   }\n   // 识别结束的时候\n-  OnRecognitionComplete() {\n+  OnRecognitionComplete(res) {\n \n   }\n   // 识别失败\n-  OnError() {\n+  OnError(res) {\n \n   }\n }\n \n"
                }
            ],
            "date": 1681723416492,
            "name": "Commit-0",
            "content": "export default class SpeechRecognizer {\n  constructor(params) {\n    console.log('params::', params)\n      this.appid = params.appid || ''\n      this.secretid = params.secretid || ''\n      this.socket = null;\n      this.isSignSuccess = false; // 是否鉴权成功\n      this.isSentenceBegin = false; // 是否一句话开始\n      this.query = {\n          ...params\n      };\n      // 用户鉴权函数\n      this.signCallback = params.signCallback || null;\n      this.isRecognizeComplete = false; // 当前是否识别结束\n  }\n  // 暂停识别，关闭连接\n  stop() {\n      if (this.socket && this.socket.readyState === 1) {\n        this.socket.send(JSON.stringify({type: 'end'}));\n      } else {\n        this.OnError('连接未建立或连接已关闭');\n        if (this.socket && this.socket.readyState === 1) {\n          this.socket.close();\n        }\n      }\n  }\n  // 拼接鉴权数据\n  async getUrl() {\n    \n      if (!this.appid || !this.secretid) {\n        this.OnError('请确认是否填入appid和secretid');\n        return false\n      }\n      const asr = new NewCredential(this.query);\n      const signStr = await asr.getSignStr();\n      return `${signStr}&signature=${encodeURIComponent(this.signCallback(signStr, this.query.secretkey))}`;\n  }\n  // 建立websocket链接 data 为用户收集的音频数据\n  async start(){\n      const url = await this.getUrl();\n      if (!url) {\n        this.OnError('鉴权失败');\n        return\n      }\n      const self = this;\n      if ('WebSocket' in window) {\n        this.socket = new WebSocket(`wss://${url}`);\n      } else if ('MozWebSocket' in window) {\n        this.socket = new MozWebSocket(`wss://${url}`);\n      } else {\n        this.OnError('浏览器不支持WebSocket')\n        return\n      }\n      this.socket.onopen = (e) => { // 连接建立时触发\n      };\n      this.socket.onmessage = (e) => { // 连接建立时触发\n        const response = JSON.parse(e.data);\n        if (response.code !== 0) {\n          this.OnError(response.message);\n          self.socket.close();\n          return;\n        } else {\n          if (!this.isSignSuccess) {\n            this.OnRecognitionStart(response);\n            this.isSignSuccess = true;\n          }\n          if (response.final === 1) {\n            this.isRecognizeComplete = true;\n            this.OnRecognitionComplete(response);\n            return;\n          }\n          if (response.result) {\n            if (response.result.slice_type === 0) {\n              this.OnSentenceBegin(response);\n              this.isSentenceBegin = true;\n            } else  if (response.result.slice_type === 2) {\n              if (!this.isSentenceBegin) {\n                this.OnSentenceBegin(response);\n              }\n              this.OnSentenceEnd(response);\n            } else {\n              this.OnRecognitionResultChange(response);\n            }\n          }\n        }\n      };\n      this.socket.onerror = (e) => { // 通信发生错误时触发\n        this.socket.close();\n        this.OnError(e);\n      }\n      this.socket.onclose = (event) => {\n        if (!this.isRecognizeComplete) {\n          this.OnError(event);\n        }\n      }\n  }\n  // 发送数据\n  write(data) {\n    if (!this.socket || this.socket.readyState !== 1) {\n      this.OnError('连接未建立，请稍后发送数据！')\n      return\n    }\n    this.socket.send(data);\n  };\n  // 开始识别的时候\n  OnRecognitionStart(res) {\n\n  }\n  // 一句话开始的时候\n  OnSentenceBegin(res) {\n\n  }\n  // 识别结果发生变化的时候\n  OnRecognitionResultChange() {\n\n  }\n  // 一句话结束的时候\n  OnSentenceEnd() {\n\n  }\n  // 识别结束的时候\n  OnRecognitionComplete() {\n\n  }\n  // 识别失败\n  OnError() {\n\n  }\n}\n\n\nexport class NewCredential {\n  constructor(query){\n    this.config = {\n      appid: query.appid,\n      secretid: query.secretid,\n      token: query.token\n    };\n    this.query = query || null;\n  }\n\n  formatSignString(params){\n    let strParam = \"\";\n    let signStr = \"asr.cloud.tencent.com/asr/v2/\";\n    if(this.config['appid']){\n      signStr += this.config['appid'];\n    }\n    const keys = Object.keys(params);\n    keys.sort();\n    for (let i = 0, len = keys.length; i < len; i++) {\n      strParam += `&${keys[i]}=${params[keys[i]]}`;\n    }\n    return `${signStr}?${strParam.slice(1)}`;\n  }\n  async createQuery(){\n    const params = {};\n    const time = new Date().getTime();\n    const guid = () => {\n      return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = Math.random() * 16 | 0,\n          v = c === 'x' ? r : (r & 0x3 | 0x8);\n        return v.toString(16);\n      });\n    };\n\n    async function getServerTime(){\n     return new Promise((resolve, reject)=>{\n        try {\n          const xhr = new XMLHttpRequest();\n          xhr.open(\"GET\", 'https://asr.cloud.tencent.com/server_time', true);\n          xhr.send();\n          xhr.onreadystatechange = function () {\n            if (xhr.readyState === 4 && xhr.status === 200) {\n              resolve(xhr.responseText);\n            }\n          }\n        } catch (error) {\n          reject(error);\n        }\n      })\n    }\n    const serverTime = await getServerTime();\n    params['secretid'] = this.config.secretid || '';\n    params['engine_model_type'] = this.query.engine_model_type || '16k_zh';\n    params['timestamp'] = parseInt(serverTime) || Math.round(time / 1000);\n    params['expired'] = Math.round(time / 1000) + 24 * 60 * 60;\n    params['nonce'] = Math.round(time / 100000);\n    params['voice_id'] = guid();\n\n    // 非必填参数\n    this.query.hasOwnProperty('voice_format') && (params['voice_format'] = this.query.voice_format);\n    this.query.hasOwnProperty('hotword_id') && (params['hotword_id'] = this.query.hotword_id);\n    this.query.hasOwnProperty('needvad') && (params['needvad'] = this.query.needvad);\n    this.query.hasOwnProperty('filter_dirty') && (params['filter_dirty'] = this.query.filter_dirty);\n    this.query.hasOwnProperty('filter_modal') && (params['filter_modal'] = this.query.filter_modal);\n    this.query.hasOwnProperty('filter_punc') && (params['filter_punc'] = this.query.filter_punc);\n    this.query.hasOwnProperty('convert_num_mode') && (params['convert_num_mode'] = this.query.convert_num_mode);\n    this.query.hasOwnProperty('word_info') && (params['word_info'] = this.query.word_info);\n    this.query.hasOwnProperty('vad_silence_time') && (params['vad_silence_time'] = this.query.vad_silence_time);\n\n    this.config.token &&  (params['token'] = this.config.token);\n\n    return params;\n  }\n  // 获取签名原文\n  async getSignStr() {\n    const queryStr = await this.createQuery();\n    return this.formatSignString(queryStr);\n  }\n}"
        }
    ]
}